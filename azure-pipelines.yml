trigger:
- main

variables:
  # Variables básicas de configuración
  DOCKER_IMAGE_NAME: 'sanandres_api'
  DOCKER_NETWORK: 'san_andres'
  PORT: '5000:8080'
  ENVIRONMENT: 'Production'  # Cambiado a Production para despliegues
  
  # Referencia al grupo de variables (debes crearlo en Azure DevOps)
  group: SanAndres-Production

pool:
  name: Default

steps:
  # Paso 1: Checkout del código
  - checkout: self
    clean: true
    fetchDepth: 1

  # Paso 2: Build de la imagen Docker
  - task: Docker@2
    displayName: 'Build Docker image'
    inputs:
      command: build
      repository: $(DOCKER_IMAGE_NAME)
      dockerfile: '**/Dockerfile'
      buildContext: '.'
      tags: latest

  # Paso 3: Detener y eliminar contenedor existente
  - script: |
      docker stop $(DOCKER_IMAGE_NAME) || true
      docker rm -v $(DOCKER_IMAGE_NAME) || true
    displayName: 'Remove existing container'

  # Paso 4: Ejecutar nuevo contenedor con todas las variables
  - script: |
      docker run -d \
        -p $(PORT) \
        --network $(DOCKER_NETWORK) \
        --name $(DOCKER_IMAGE_NAME) \
        $(DOCKER_IMAGE_NAME):latest
    displayName: 'Run Docker container'
    env:
      POSTGRES_CONNECTION_STRING: $(POSTGRES_CONNECTION_STRING)
      JWT_SECRET_KEY: $(JWT_SECRET_KEY)
      JWT_ISSUER_URL: $(JWT_ISSUER_URL)
      JWT_AUDIENCE_URL: $(JWT_AUDIENCE_URL)
      JASPER_SERVER: $(JASPER_SERVER)
      JASPER_DATABASE: $(JASPER_DATABASE)
      JASPER_USER: $(JASPER_USER)
      JASPER_PASSWORD: $(JASPER_PASSWORD)
      CLOUDINARY_NAME: $(CLOUDINARY_NAME)
      CLOUDINARY_API_KEY: $(CLOUDINARY_API_KEY)
      CLOUDINARY_API_SECRET: $(CLOUDINARY_API_SECRET)
      GOOGLE_AUTH_CLIENT_ID: $(GOOGLE_AUTH_CLIENT_ID)
      GOOGLE_AUTH_CLIENT_SECRET: $(GOOGLE_AUTH_CLIENT_SECRET)
      GOOGLE_DRIVE_SERVICE_ACCOUNT: $(GOOGLE_DRIVE_SERVICE_ACCOUNT)
      IA_SERVICE_ENDPOINT: $(IA_SERVICE_ENDPOINT)